/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AgentAssignment as PrismaAgentAssignment,
  Client as PrismaClient,
  Property as PrismaProperty,
} from "@prisma/client";

export class AgentAssignmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AgentAssignmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.agentAssignment.count(args);
  }

  async agentAssignments<T extends Prisma.AgentAssignmentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentAssignmentFindManyArgs>
  ): Promise<PrismaAgentAssignment[]> {
    return this.prisma.agentAssignment.findMany<Prisma.AgentAssignmentFindManyArgs>(
      args
    );
  }
  async agentAssignment<T extends Prisma.AgentAssignmentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentAssignmentFindUniqueArgs>
  ): Promise<PrismaAgentAssignment | null> {
    return this.prisma.agentAssignment.findUnique(args);
  }
  async createAgentAssignment<T extends Prisma.AgentAssignmentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentAssignmentCreateArgs>
  ): Promise<PrismaAgentAssignment> {
    return this.prisma.agentAssignment.create<T>(args);
  }
  async updateAgentAssignment<T extends Prisma.AgentAssignmentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentAssignmentUpdateArgs>
  ): Promise<PrismaAgentAssignment> {
    return this.prisma.agentAssignment.update<T>(args);
  }
  async deleteAgentAssignment<T extends Prisma.AgentAssignmentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AgentAssignmentDeleteArgs>
  ): Promise<PrismaAgentAssignment> {
    return this.prisma.agentAssignment.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.agentAssignment
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.agentAssignment
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }
}
