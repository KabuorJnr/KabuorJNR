/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Client as PrismaClient,
  AgentAssignment as PrismaAgentAssignment,
  Appointment as PrismaAppointment,
} from "@prisma/client";

export class ClientServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClientCountArgs, "select">): Promise<number> {
    return this.prisma.client.count(args);
  }

  async clients<T extends Prisma.ClientFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientFindManyArgs>
  ): Promise<PrismaClient[]> {
    return this.prisma.client.findMany<Prisma.ClientFindManyArgs>(args);
  }
  async client<T extends Prisma.ClientFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientFindUniqueArgs>
  ): Promise<PrismaClient | null> {
    return this.prisma.client.findUnique(args);
  }
  async createClient<T extends Prisma.ClientCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientCreateArgs>
  ): Promise<PrismaClient> {
    return this.prisma.client.create<T>(args);
  }
  async updateClient<T extends Prisma.ClientUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientUpdateArgs>
  ): Promise<PrismaClient> {
    return this.prisma.client.update<T>(args);
  }
  async deleteClient<T extends Prisma.ClientDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClientDeleteArgs>
  ): Promise<PrismaClient> {
    return this.prisma.client.delete(args);
  }

  async findAgentAssignments(
    parentId: string,
    args: Prisma.AgentAssignmentFindManyArgs
  ): Promise<PrismaAgentAssignment[]> {
    return this.prisma.client
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .agentAssignments(args);
  }

  async findAppointments(
    parentId: string,
    args: Prisma.AppointmentFindManyArgs
  ): Promise<PrismaAppointment[]> {
    return this.prisma.client
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .appointments(args);
  }
}
